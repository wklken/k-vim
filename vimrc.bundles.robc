""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim bundle configuration
" Robbie Cao <robbie.cao@gmail.com>
"
" This is the .vimrc file of Robbie Cao.
" Much of it is beneficial for general use, I would recommend
" picking out the parts you want and understand.
"
" Major of those config are from:
" - spf13/spf13-vim (https://github.com/spf13/spf13-vim)
" - wklken/k-vim (https://github.com/wklken/k-vim)
" Thank spf13 and wklken !
"
" You can find me at https://www.facebook.com/cao.robbie
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Dependence
" Package :  ctags, ag(the_silver_searcher)
" Python  :  pep8, pyflake
" Install them external


" 非兼容vi模式。去掉有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
" Configure Vundle
filetype off                    " REQUIRED! Turn off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Bundles
Bundle 'gmarik/vundle'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
if executable('ag')
    Bundle 'mileszs/ack.vim'
    let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
elseif executable('ack-grep')
    let g:ackprg="ack-grep -H --nocolor --nogroup --column"
    Bundle 'mileszs/ack.vim'
elseif executable('ack')
    Bundle 'mileszs/ack.vim'
endif

" Setup Bundle Support
" The next three lines ensure that the ~/.vim/bundle/ system works
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" Add an UnBundle command
function! UnBundle(arg, ...)
    let bundle = vundle#config#init_bundle(a:arg, a:000)
    call filter(g:vundle#bundles, 'v:val["name_spec"] != "' . a:arg . '"')
endfunction

com! -nargs=+ UnBundle call UnBundle(<args>)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Vundle
" Plugin manager using bundle
"   :PluginList          - list configured plugins
"   :PluginInstall(!)    - install (update) plugins
"   :PluginSearch(!) foo - search (or refresh cache first) for foo
"   :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
Bundle 'gmarik/vundle'

let g:syntastic_ennabled = 1
" Syntastic {
" Syntax checking
if g:syntastic_ennabled
    Bundle 'scrooloose/syntastic'

    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    " To see error location list
    let g:syntastic_loc_list_height          = 3
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list            = 1
    let g:syntastic_check_on_open            = 1
    let g:syntastic_check_on_wq              = 0
    let g:syntastic_enable_highlighting      = 1
    let g:syntastic_error_symbol             = '>>'
    let g:syntastic_warning_symbol           = '>'

    let s:syntastic_feature_enabled = 0      " Disable the following settings

    if s:syntastic_feature_enabled  " {
        " 最轻量
        let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes

        " 中等
        " Error code: http://pep8.readthedocs.org/en/latest/intro.html#error-codes
        let g:syntastic_python_checkers=['pyflakes', 'pep8'] " 使用pyflakes,速度比pylint快
        let g:syntastic_python_pep8_args='--ignore=E501,E225,E124,E712'

        " 重量级, 但是足够强大, 定制完成后相当个性化
        " pylint codes: http://pylint-messages.wikidot.com/all-codes
        let g:syntastic_python_checkers=['pyflakes', 'pylint'] " 使用pyflakes,速度比pylint快
        let g:syntastic_python_checkers=['pylint'] " 使用pyflakes,速度比pylint快
        let g:syntastic_python_pylint_args='--disable=C0111,R0903,C0301'


        let g:syntastic_javascript_checkers = ['jsl', 'jshint']
        let g:syntastic_html_checkers=['tidy', 'jshint']
        " 修改高亮的背景色, 适应主题
        highlight SyntasticErrorSign guifg=white guibg=black


        function! ToggleErrors()
            let old_last_winnr = winnr('$')
            lclose
            if old_last_winnr == winnr('$')
                " Nothing was closed, open syntastic error location panel
                Errors
            endif
        endfunction
        nnoremap <Leader>s :call ToggleErrors()<cr>
        nnoremap <Leader>sn :lnext<cr>
        nnoremap <Leader>sp :lprevious<cr>
    endif
    " }
endif
" }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 自动补全
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:ycm_enabled = 1
" YouCompleteMe
" A fast, as-you-type, fuzzy-search code completion engine
" 迄今为止用到的最好的自动VIM自动补全插件
" Compiling YCM with semantic support for C-family languages:
"   $ cd ~/.vim/bundle/YouCompleteMe
"   $ ./install.py --clang-completer
" 重启 :YcmRestartServer
if g:ycm_enabled
    Bundle 'Valloric/YouCompleteMe'

    let s:ycm_python = 0

    " 默认Tab, S-Tab 和YCM自动补全冲突
    " Use C-n/p for next/prev
    let g:ycm_key_list_select_completion=['<c-n>']
    let g:ycm_key_list_previous_completion=['<c-p>']
    " Use Down/Up for next/prev
    "let g:ycm_key_list_select_completion = ['<Down>']
    "let g:ycm_key_list_previous_completion = ['<Up>']
    " 在注释输入中也能补全
    let g:ycm_complete_in_comments = 1
    " 在字符串输入中也能补全
    let g:ycm_complete_in_strings = 1
    " 提示UltiSnips
    let g:ycm_use_ultisnips_completer = 1
    " 注释和字符串中的文字也会被收入补全
    let g:ycm_collect_identifiers_from_comments_and_strings = 1
    let g:ycm_collect_identifiers_from_tags_files = 1
    " 语言关键字补全, 不过python关键字都很短，所以，需要的自己打开
    let g:ycm_seed_identifiers_with_syntax = 0

    " 跳转到定义处, 分屏打开
    let g:ycm_goto_buffer_command = 'horizontal-split'
    nnoremap <Leader>ygd :YcmCompleter GoToDefinition<CR>
    nnoremap <Leader>yge :YcmCompleter GoToDefinitionElseDeclaration<CR>
    nnoremap <Leader>ygs :YcmCompleter GoToDeclaration<CR>

    if s:ycm_python     " {
        " 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
        " Old version
        if !empty(glob("~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"))
            let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"
        endif
        " New version
        if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
            let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
        endif
    endif
    " }

    " Insert模式下直接触发自动补全
    "let g:ycm_key_invoke_completion = '<C-Space>'
    " 黑名单,不启用
    let g:ycm_filetype_blacklist = {
                \   'tagbar' : 1,
                \   'gitcommit' : 1,
                \  }

    " http://www.yycmmc.com/?p=53 {
    " 补全功能在注释中同样有效
    let g:ycm_complete_in_comments=1
    " 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
    let g:ycm_confirm_extra_conf=0
    " 开启 YCM 基于标签引擎
    let g:ycm_collect_identifiers_from_tags_files=1
    " 引入 C++ 标准库tags，这个没有也没关系，只要.ycm_extra_conf.py文件中指定了正确的标准库路径
    set tags+=/data/misc/software/misc./vim/stdcpp.tags
    " YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
    inoremap <Leader>; <C-x><C-o>
    " 补全内容不以分割子窗口形式出现，只显示补全列表
    set completeopt-=preview
    " 从第2个键入字符开始罗列匹配项
    let g:ycm_min_num_of_chars_for_completion=2
    " 禁止缓存匹配项，每次都重新生成匹配项
    let g:ycm_cache_omnifunc=0
    " 语法关键字补全
    let g:ycm_seed_identifiers_with_syntax=1
    " 修改对C函数的补全快捷键，默认是CTRL + space，修改为ALT + ;
    let g:ycm_key_invoke_completion = '<M-;>'
    " 设置转到定义处的快捷键为ALT + G，这个功能非常赞
    nmap <M-g> :YcmCompleter GoToDefinitionElseDeclaration <C-R>=expand("<cword>")<CR><CR>
    " }
endif
" }


let g:ultisnips_enabled = 1
" UltiSnips {
" 代码片段快速插入
if g:ultisnips_enabled
    Bundle 'SirVer/ultisnips'
    " Snippets are separated from the engine. Add this if you want them:
    Bundle 'honza/vim-snippets'

    " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
    let g:UltiSnipsExpandTrigger       = "<Tab>"
    let g:UltiSnipsJumpForwardTrigger  = "<Tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"
    let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
    let g:UltiSnipsSnippetsDir         = '~/.vim/snips'
    map <leader>us :UltiSnipsEdit<CR>

    " TO BE TESTED {
    " Ctrl+j/k 进行选择
    func! g:JInYCM()
        if pumvisible()
            return "\<C-n>"
        else
            return "\<C-j>"
        endif
    endfunction

    func! g:KInYCM()
        if pumvisible()
            return "\<C-p>"
        else
            return "\<C-k>"
        endif
    endfunction
    inoremap <C-j> <C-k>=g:JInYCM()<cr>
    au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
    let g:UltiSnipsJumpBackwordTrigger = "<C-k>"
    " }
endif
" }


" delimitMate {
" 自动补全引号/括号等
" Automatic closing of quotes, parenthesis, brackets, etc
Bundle 'Raimondi/delimitMate'
let delimitMate_expand_cr = 1
" }

" For python docstring {
au FileType python let b:delimitMate_nesting_quotes = ['"']
" 关闭某些类型文件的自动补全
au FileType mail let b:delimitMate_autoclose = 0
" }


" 自动补全html/xml标签 {
Bundle 'docunext/closetag.vim'
let g:closetag_html_style=1
" }

let g:neocomplete_ennabled = 1
" NeoComplete {
" Another plugin for code completeion.
" It provides keyword completion system by maintaining a cache of keywords in the current buffer.
if g:neocomplete_ennabled
    Bundle 'Shougo/neocomplete.vim'
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
                \ 'default' : '',
                \ 'vimshell' : $HOME.'/.vimshell_hist',
                \ 'scheme' : $HOME.'/.gosh_completions'
                \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
        return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
        " For no inserting <CR> key.
        "return pumvisible() ? "\<C-y>" : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

    " AutoComplPop like behavior.
    "let g:neocomplete#enable_auto_select = 1

    " Shell like behavior(not recommended).
    "set completeopt+=longest
    "let g:neocomplete#enable_auto_select = 1
    "let g:neocomplete#disable_auto_complete = 1
    "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
endif
" }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 快速编码
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 快速注释
" nerdcommenter {
Bundle 'scrooloose/nerdcommenter'
" <Leader>cc - Comment out the current line or text selected in visual mode.
" <Leader>cn - Same as |<Leader>|cc but forces nesting.
" <Leader>c<space> - Toggles the comment state of the selected line(s).
" <Leader>cm - Comments the given lines using only one set of multipart delimiters.
" <Leader>ci - Toggles the comment state of the selected line(s) individually.
" <Leader>cs - Comments out the selected lines ``sexily''
" <Leader>cy - Same as |<Leader>|cc except that the commented line(s) are yanked first.
" <Leader>c$ - Comments the current line from the cursor to the end of line.
" <Leader>cA - Adds comment delimiters to the end of line and goes into insert mode between them.
let g:NERDSpaceDelims = 1
" }


" vim-surround {
" Easily delete, change and add surroundings - parentheses, brackets, quotes,
" XML tags, and more - in pairs.
Bundle 'tpope/vim-surround'
" For repeat -> enhance surround.vim, . to repeat command
Bundle 'tpope/vim-repeat'
" }

" vim-trailing-whitespace {
" 快速去行尾空格 [, + <Space>]
Bundle 'bronson/vim-trailing-whitespace'
map <leader><space> :FixWhitespace<cr>
" }

" vim-easy-align {
" 快速赋值语句对齐
Bundle 'junegunn/vim-easy-align'
vmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
" }

" Tabular {
" Text filtering and alignment
Bundle 'godlygeek/tabular'
" }


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 快速移动
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" easymotion {
" 更高效的移动 [,, + w/fx]
Bundle 'Lokaltog/vim-easymotion'
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><Leader>l <Plug>(easymotion-lineforward)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><Leader>. <Plug>(easymotion-repeat)
" }

" vim-signature {
" Place, toggle and display marks
" 方便进行标记和跳转
" m[a-zA-Z] - add mark
" '[a-zA-Z] - go to mark
" m<Space>  - del all marks
Bundle "kshenoy/vim-signature"
" }


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 快速选中
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" expend-region {
" 选中区块
Bundle 'terryma/vim-expand-region'
" map + <Plug>(expand_region_expand)
" map _ <Plug>(expand_region_shrink)
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)
" }

" multiple-cursors {
" 多光标选中编辑
Bundle 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
" }


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 文本对象
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" textobj {
" 支持自定义文本对象
Bundle 'kana/vim-textobj-user.git'
" 增加行文本对象: l   dal yal cil
Bundle 'kana/vim-textobj-line'
" 增加文件文本对象: e   dae yae cie
Bundle 'kana/vim-textobj-entire.git'
" 增加缩进文本对象: i   dai yai cii - 相同缩进属于同一块
Bundle 'kana/vim-textobj-indent.git'
" }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 快速搜索
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ctrlp {
" 文件搜索
Bundle 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

map <leader>f :CtrlPMRU<CR>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
" Excluding version control directories
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*        " Linux/MacOSX
set wildignore+=*\\.git\\*,*\\.hg\\*,*\\.svn\\*  " Windows ('noshellslash')

let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$',
            \ 'file': '\v\.(exe|so|dll)$',
            \ 'link': 'some_bad_symbolic_links',
            \ }
let g:ctrlp_working_path_mode     = 0
let g:ctrlp_match_window_bottom   = 1
let g:ctrlp_max_height            = 15
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_mruf_max              = 500
let g:ctrlp_follow_symlinks       = 1
let g:ctrlp_working_path_mode     = 'ra'

let g:ctrlp_mruf_max              = 250

" 如果安装了ag, 使用ag
if executable('ag')
    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
endif
" }


" ctrlp-funky {
" ctrlp插件 - 不用ctag进行函数快速跳转
Bundle 'tacahiroy/ctrlp-funky'
nnoremap <Leader>fu :CtrlPFunky<Cr>
" Narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_funky_multi_buffers = 1
let g:ctrlp_funky_sort_by_mru = 1
let g:ctrlp_funky_use_cache = 1
let g:ctrlp_funky_nerdtree_include_files = 1
let g:ctrlp_funky_php_requires = 1
let g:ctrlp_funky_php_include = 1

let g:ctrlp_extensions = ['funky']
" }

" ctrlsf {
" 类似sublimetext的搜索
Bundle "dyng/ctrlsf.vim"
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
nmap \ <Plug>CtrlSFCwordPath<CR>
" let g:ctrlsf_position = 'below'
" let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
" Note: cannot use <CR> or <C-m> for open
" Use : <sapce> or <tab>
let g:ctrlsf_mapping = {
            \ "open"  : "<Space>",
            \ "openb" : "O",
            \ "tab"   : "t",
            \ "tabb"  : "T",
            \ "prevw" : "p",
            \ "quit"  : "q",
            \ "next"  : "<C-J>",
            \ "prev"  : "<C-K>",
            \ "pquit" : "q",
            \ }
" }

" Git wrapper {
" fugitive
"   :Gdiff
"   :Gstatus
"   :Gvsplit
"   :Glog
Bundle 'tpope/vim-fugitive'
nnoremap <Leader><Leader>ge :Gdiff<CR>
nnoremap <Leader><Leader>gb :Gblame<CR>
nnoremap <Leader><Leader>gs :Gstatus<CR>
nnoremap <Leader><Leader>gd :Gdiff<CR>  和现有冲突
nnoremap <Leader><Leader>gl :Glog<CR>
nnoremap <Leader><Leader>gc :Gcommit<CR>
nnoremap <Leader><Leader>gp :Git push<CR>

Bundle 'vim-scripts/vcscommand.vim'
let b:VCSCommandMapPrefix=',v'
let b:VCSCommandVCSType='git'
nmap <Leader><Leader>vs :VCSStatus<CR>
nmap <Leader><Leader>vc :VCSCommit<CR>
nmap <Leader><Leader>vb :VCSBlame<CR>
nmap <Leader><Leader>va :VCSAdd<CR>
nmap <Leader><Leader>vd :VCSVimDiff<CR>
nmap <Leader><Leader>vl :VCSLog<CR>
nmap <Leader><Leader>vu :VCSUpdate<CR>

" gitgutter
" 同git diff,实时展示文件中修改的行
Bundle 'airblade/vim-gitgutter'
let g:gitgutter_map_keys = 0
let g:gitgutter_enabled = 0
let g:gitgutter_signs = 0
let g:gitgutter_highlight_lines = 1
nnoremap <Leader>gt :GitGutterToggle<CR>
nnoremap <Leader>gs :GitGutterSignsToggle<CR>
nnoremap <Leader>gl :GitGutterLineHighlightsToggle<CR>
" }

" gundo {
" Edit history, 可以查看回到某个历史状态
Bundle 'sjl/gundo.vim'
noremap <leader>h :GundoToggle<CR>
" }


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 显示增强
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 状态栏增强展示
let g:airline_enabled = 1

" vim-airline {
if g:airline_enabled
    Bundle 'bling/vim-airline'
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_left_sep = '▶'
    let g:airline_left_alt_sep = '❯'
    let g:airline_right_sep = '◀'
    let g:airline_right_alt_sep = '❮'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'
    " 是否打开tabline
    let g:airline#extensions#tabline#enabled = 1
endif
" }


" rainbow_parentheses {
" 括号显示增强
Bundle 'kien/rainbow_parentheses.vim'
" 不加入这行, 防止黑色括号出现, 很难识别
" \ ['black',       'SeaGreen3'],
let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
" Always On
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
" }


" 主题
" Theme {
let g:customize_theme = 0

if g:customize_theme
    " solarized
    Bundle 'altercation/vim-colors-solarized'
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    let g:solarized_termcolors=256

    " molokai
    Bundle 'tomasr/molokai'
    " 原始背景色
    let g:molokai_original = 1

    " tomorrow
    Bundle 'chriskempson/vim-tomorrow-theme'
endif
" }


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 快速导航
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 目录导航
" nerdtree {
Bundle 'scrooloose/nerdtree'
map <leader>n :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'

Bundle 'jistr/vim-nerdtree-tabs'
map <Leader>n <plug>NERDTreeTabsToggle<CR>
" 关闭同步
let g:nerdtree_tabs_synchronize_view=0
let g:nerdtree_tabs_synchronize_focus=0
" 自动开启nerdtree
let g:nerdtree_tabs_open_on_console_startup=0
" }

let g:taglist_enabled = 1
" taglist {
" Source code browser plugin for Vim.
" Provides an overview of the structure of source code files and allows
" you to efficiently browse through source code files for different
" programming languages.
" 使用tagbar和ctrlp-funky可以直接快速跳转函数和变量位置,taglist有些多余
if g:taglist_enabled
    Bundle 'vim-scripts/taglist.vim'

    if &diff
        " Don't auto pen when compare two files
        let Tlist_Auto_Open=0
    else
        " Auto pen Tlist when open a file
        let Tlist_Auto_Open=1
    endif

    let Tlist_Auto_Highlight_Tag=1
    let Tlist_Use_Right_Window=0
    let Tlist_Auto_Update=1
    let Tlist_File_Fold_Auto_Close=1
    let Tlist_Exit_OnlyWindow=1
    let Tlist_Highlight_Tag_On_BufEnter=1
    let Tlist_Use_SingleClick=0
endif
" }

" Trinity {
" The Trinity plugin manages Source Explorer, Taglist and NERD Tree, and build
" them as a great IDE which works like the "Source Insignt".
Bundle 'wesleyche/Trinity'

" Open and close all the three plugins on the same time
nmap <Leader>ta   :TrinityToggleAll<CR>
" Open and close the srcexpl.vim separately
nmap <Leader>ts   :TrinityToggleSourceExplorer<CR>
" Open and close the taglist.vim separately
nmap <Leader>tl   :TrinityToggleTagList<CR>
" Open and close the NERD_tree.vim separately
nmap <Leader>tt   :TrinityToggleNERDTree<CR>
" }


" Vim Workspace Controller {
Bundle "szw/vim-ctrlspace"
let g:airline_exclude_preview = 1
hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8

let g:minibufferexpl_enabled = 0
" minibufferexpl
" Not enable, 有需要同学的自己解开
if g:minibufferexpl_enabled
    Bundle 'fholgado/minibufexpl.vim'
    let g:miniBufExplMapWindowNavVim = 1
    let g:miniBufExplMapWindowNavArrows = 1
    let g:miniBufExplMapCTabSwitchBufs = 1
    let g:miniBufExplModSelTarget = 1
    " 解决FileExplorer窗口变小问题
    let g:miniBufExplForceSyntaxEnable = 1
    let g:miniBufExplorerMoreThanOne=2
    let g:miniBufExplCycleArround=1
    " 默认方向键左右可以切换buffer
    nnoremap <TAB> :MBEbn<CR>
    noremap <leader>bn :MBEbn<CR>
    noremap <leader>bp :MBEbp<CR>
    noremap <leader>bd :MBEbd<CR>
endif
" }


" 标签导航
" tagbar {
Bundle 'majutsushi/tagbar'
nmap <F9> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
" For ruby
let g:tagbar_type_ruby = {
            \ 'kinds' : [
            \ 'm:modules',
            \ 'c:classes',
            \ 'd:describes',
            \ 'C:contexts',
            \ 'f:methods',
            \ 'F:singleton methods'
            \ ]
            \ }

let g:gottags_enabled = 0
" Go语言的tagbar配置
" 1. install gotags 'go get -u github.com/jstemmer/gotags'
" 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
" for gotags. work with tagbar
if g:gottags_enabled
    let g:tagbar_type_go = {
                \ 'ctagstype' : 'go',
                \ 'kinds'     : [
                \ 'p:package',
                \ 'i:imports:1',
                \ 'c:constants',
                \ 'v:variables',
                \ 't:types',
                \ 'n:interfaces',
                \ 'w:fields',
                \ 'e:embedded',
                \ 'm:methods',
                \ 'r:constructor',
                \ 'f:functions'
                \ ],
                \ 'sro' : '.',
                \ 'kind2scope' : {
                \ 't' : 'ctype',
                \ 'n' : 'ntype'
                \ },
                \ 'scope2kind' : {
                \ 'ctype' : 't',
                \ 'ntype' : 'n'
                \ },
                \ 'ctagsbin'  : 'gotags',
                \ 'ctagsargs' : '-sort -silent'
                \ }
endif
" }

" tmux-navigator {
" For tmux navigator Ctrl-hjkl
Bundle 'christoomey/vim-tmux-navigator'
" }

" SrcExpl {
" Exploring the source code based on "tags"
Bundle 'wesleyche/SrcExpl'
" "}

" bufexplorer {
" Quickly and easily switch between buffers by using the one of
" the default public interfaces:
" - 'be' (normal open)
" - 'bt' (toggle open / close)
" - 'bs' (force horizontal split open)
" - 'bv' (force vertical split open)
Bundle 'jlanzarotta/bufexplorer'
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerSplitRight=0        " Split left.
let g:bufExplorerVertSize=30         " New split window is n columns wide.
let g:bufExplorerShowDirectories=0   " Do not show directories.
let g:bufExplorerShowRelativePath=1  " Show relative paths.
nmap <Leader>b :BufExplorer<CR>
nmap <Leader>be :BufExplorer<CR>
" }


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 快速查找
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ack {
" Run your favorite search tool ack from Vim, with an enhanced results list.
Bundle 'mileszs/ack.vim'
" }

" acp {
" Automatically opens popup menu for completions
Bundle 'vim-scripts/AutoComplPop'
" }

" matchit {
" Allows you to configure % to match more than just single characters
Bundle 'tmhedberg/matchit'
" }

" Lookupfile {
Bundle 'vim-scripts/lookupfile'
let g:LookupFile_MinPatLength = 2               " start search until 2 char input
let g:LookupFile_PreserveLastPattern = 0        " not save last search strin
let g:LookupFile_PreservePatternHistory = 1     " save serach history
let g:LookupFile_AlwaysAcceptFirst = 1          " enter to open first match
let g:LookupFile_AllowNewFiles = 0              " not create file which not exist
let g:LookupFile_ignorecase= 1                  " ignore case to match files
if filereadable("fn.tags")                      " set tag file name
    let g:LookupFile_TagExpr = '"fn.tags"'
endif
nmap <silent> <Leader>lf :LookupFile<cr>
nmap <silent> <Leader>lt :LUTags<cr>
nmap <silent> <Leader>lb :LUBufs<cr>
nmap <silent> <Leader>lp :LUPath<cr>
nmap <silent> <Leader>lw :LUWalk<cr>
" }
" genutils {
Bundle 'clones/vim-genutils'
" }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 语言相关
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" vim-quickrun {
" Plugin to execute whole/part of editing file.
Bundle 'thinca/vim-quickrun'
let g:quickrun_config = {
            \   "_" : {
            \       "outputter" : "message",
            \   },
            \}

let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r <Plug>(quickrun)
map <F10> :QuickRun<CR>
" }

let g:python_enabled = 0
" Python {

if g:python_enabled
    " python fly check, 弥补syntastic只能打开和保存才检查语法的不足
    Bundle 'kevinw/pyflakes-vim'
    let g:pyflakes_use_quickfix = 0

    " For python.vim syntax highlight
    Bundle 'hdima/python-syntax'
    let python_highlight_all = 1


    " Python code format
    autocmd FileType python nnoremap <leader>y :0,$!yapf<Cr>
    Bundle 'mindriot101/vim-yapf'
    set scriptencoding utf-8
    let g:yapf_style = "google"
    let g:yapf_style = "pep8"
    setenv PYTHONIOENCODING UTF-8
    nnoremap <leader>y :call Yapf()<cr>
endif
" }

let g:golang_enabled = 0
" Go {
" 1.install golang and install gocode 'go get github.com/nsf/gocode'
" 2.make sure gocode in your path: `which gocode` (add $GOPATH/bin to you $PATH)
if g:golang_enabled
    Bundle 'Blackrush/vim-gocode'
    Bundle 'fatih/vim-go.git'
endif
" }

let g:ruby_enabled = 0
" Ruby {
if g:ruby_enabled
    "Bundle 'vim-ruby/vim-ruby'
    "Bundle 'nelstrom/vim-textobj-rubyblock'

    " 有bug, 和当前有冲突, 尚未解决, 不要打开
    "Bundle 'tpope/vim-endwise'
    "Bundle 'tpope/vim-rails'
endif
" }

let g:javascript_enabled = 0
" JavaScript {
if g:javascript_enabled
    " For javascript 自动补全,配合YCM,需要安装nodejs&npm  see
    " https://github.com/marijnh/tern_for_vim
    "Bundle 'marijnh/tern_for_vim'

    " For jquery
    "Bundle 'nono/jquery.vim'

    " emmet HTML complete
    "Bundle "mattn/emmet-vim"
endif
" }


let g:vim_less_enabled = 0
" vim.less {
if g:vim_less_enabled
    Bundle 'groenewege/vim-less'
    autocmd BufWritePost *.less :!lessc % > %:p:r.css
endif
" }

let g:jinja2_enabled = 0
" Jinja2 {
if g:jinja2_enabled
    Bundle 'Glench/Vim-Jinja2-Syntax'
endif
" }

let g:css_enabled = 0
" HTML/JS/JQUERY/CSS {
if g:css_enabled
    " Not work in iterm2 which termianl selection is not xterm-256
    Bundle 'ap/vim-css-color'

    " For javascript  注意: syntax这个插件要放前面
    Bundle 'jelera/vim-javascript-syntax'
    Bundle "pangloss/vim-javascript"
    let g:html_indent_inctags = "html,body,head,tbody"
    let g:html_indent_script1 = "inc"
    let g:html_indent_style1 = "inc"


endif
" }

let g:nginx_enabled = 0
" nginx {
if g:nginx_enabled
    Bundle 'evanmiller/nginx-vim-syntax'
endif
" }

let g:markdown_enabled = 1
" Markdown {
if g:markdown_enabled
    Bundle 'plasticboy/vim-markdown'
    let g:vim_markdown_folding_disabled = 1

    " Markdown Preview
    Bundle 'MikeCoder/markdown-preview.vim'
    let g:MarkDownCSSDir='~/.vim/mdres'
    map <Leader><Leader>md  :MarkdownPreview GitHub<CR>

    " Instant Markdown
    " https://github.com/suan/vim-instant-markdown
    " You first need to have node.js with npm installed.
    " Nodejs - https://nodejs.org/en/
    " $ [sudo] npm -g install instant-markdown-d
    " $ npm -g install instant-markdown-d
    Bundle 'suan/vim-instant-markdown'
    let g:instant_markdown_slow = 1
    let g:instant_markdown_autostart = 1
    map <Leader><Leader>mi  :InstantMarkdownPreview GitHub<CR>

endif
" }

let g:xml_enabled = 0
" XML {
if g:xml_enabled
    " A plugin for editing xml
    Bundle 'othree/xml.vim'
endif
" }


" C {
" c.vim
" C/C++ IDE --  Write and run programs. Insert statements, idioms, comments etc.
Bundle 'vim-scripts/c.vim'
" Vim library plugin to provide an easy way to define your own operator
Bundle 'kana/vim-operator-user'

" clang-format
" Formats your C++ code with specific coding style using clang
Bundle 'rhysd/vim-clang-format'

" BS_Attach     (in configuration: Attach) Always attach braces to surrounding context.
" BS_Linux      (in configuration: Linux) Like Attach, but break before braces on function,
"               namespace and class definitions.
" BS_Stroustrup (in configuration: Stroustrup) Like Attach, but break before function
"               definitions, and .else..
" BS_Allman     (in configuration: Allman) Always break before braces.
" BS_GNU        (in configuration: GNU) Always break before braces and add an extra level
"               of indentation to braces of control statements, not to those of class,
"               function or other definitions.
let g:clang_format#style_options = {
            \ "BasedOnStyle" : "WebKit",
            \ "AccessModifierOffset" : -4,
            \ "UseTab" : "Never",
            \ "IndentWidth" : 4,
            \ "TabWidth" : 4,
            \ "ColumnLimit" : 0,
            \ "AlignTrailingComments" : "true",
            \ "AllowShortIfStatementsOnASingleLine" : "false",
            \ "AllowShortLoopsOnASingleLine" : "false",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "BreakBeforeBraces" : "Allman",
            \ "SpaceBeforeAssignmentOperators" : "true",
            \ "IndentCaseLabels" : "true",
            \ "Standard" : "Auto"}

" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" If you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" }

" autoload_cscope {
" Automatically load cscope.out databases into vim when you open a C file. (headers included)
Bundle 'vim-scripts/autoload_cscope.vim'
" }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tools
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Calendar {
" A calendar application for Vim
Bundle 'itchyny/calendar.vim'
let g:calendar_google_calendar = 1
let g:calendar_google_task = 1
" }

" browser {
" This plugin provides vim with web browsing and html formatting capabilities.
Bundle 'vim-scripts/browser.vim'
" }

" w3m web browser
Bundle 'yuratomo/w3m.vim'

" easyclip {
" Simplified clipboard functionality for Vim
Bundle 'svermeulen/vim-easyclip'
" }

