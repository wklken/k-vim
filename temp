<h1>个人总结</h1>

<pre><code>大学的第一学年已经过去，为了做记录以及整改将来的计划 现做个人总结如下:
</code></pre>

<h3>一学年成绩简评</h3>

<ul>
<li><h4>挂科(1): 模拟数字电路</h4>

<p>因平时上课不注意听课，导致没有通过</p></li>
<li><p>补考(1): 高等数学</p>

<p>因前期旷课较多，且考试时记错公式以致基本全错</p></li>
<li><p>良好(3): C语言 离散数学 C++</p>

<p>主要在于课后学习的精力都放在这上面了，离散还得感谢自考老师教得真好0r2...</p></li>
</ul>

<blockquote>
  <p>上课得注意听课，不要旷课 不然之后补考太麻烦
主观上是希望多些自习时间，不过也很难保证有空就会学习</p>
</blockquote>

<h4>小节：提高自控能力吧0r2...</h4>

<h3>全年收获</h3>

<ol>
<li><h4>C语言</h4>

<p>用C写的程序不多，只有三个(因内容太多就不附源码了)</p>

<ul>
<li>根据某些进程是否在运行来自动关机(only windows)</li>
<li>制定格式与目录批量的复制文件(only windows)</li>
<li>学生成绩管理系统(only windows) # 这是学校要求的大作业，作为我最后一次用C</li>
</ul></li>
<li><h4>数学</h4>

<p>数学其实看了四本书，虽然没有一本是能全部看完的
感觉就是看不下去，大概过段时间我还会再拿起他...希望这不会再很久之后</p></li>
<li><h4>Python</h4>

<p>Python算是我下学期主要学的东西
写了不少东西，其中包括很多日常应用
就把<a href="https://bitbucket.org/LittleKey">Bitbucket</a>上的列举一下</p>

<ul>
<li><p><a href="https://github.com/LittleKey/simple-adv">simple</a></p>

<blockquote>
  <p>与某个网友(winkidney)合作的adv类型游戏的游戏引擎
我现在已经停止继续开发，不软件也已经时可以使用的程度
虽然还不太完善，不过也欢迎使用或加入开发(请发邮件给我)</p>
</blockquote></li>
<li><p><a href="https://bitbucket.org/LittleKey/texww">TeXWW</a></p>

<blockquote>
  <p>用 waf 管理 TeX 文件
因为近期开始使用waf与TeX(会在后面介绍)
用tex写文档需要进行类似编译的过程
期间会产生很多一般没有作用的文件，以及每次都要对写好的文档进行编译
很那管理，所以我写了这个软件来方便自己使用
他能批量的生成PDF(from .tex)文件，也能批量的删除生成的PDF
并且不会对已经编译过且没有修改过的tex文件进行"编译"
至少它对我来说是个很方便的东西</p>
</blockquote></li>
<li><p><a href="https://bitbucket.org/LittleKey/minitalk">MiniTalk</a></p>

<blockquote>
  <p>跨平台的交流软件
本来是想用来与在windows下的朋友语音的，不过暂时还没完工
目前只能进行文字交流，且图形界面(GUI)只做了一半，放置ing
不多做介绍...</p>
</blockquote></li>
</ul>

<p>目前也已经放弃了python的继续学习，不过还是经常会用到 他是一门很棒的程序设计语言</p></li>
<li><h4>Linux</h4>

<p>在Linux下摸打滚爬半年了，现在停留在Debian sid并且不打算再折腾
即使只有字符界面也能正常作业，能手动编译应用软件，手动编译Linux内核
至少能解决我的电脑的驱动问题(f**k nvidia)
日常即是哟嗯Python写点脚本方便使用
不多说...</p></li>
<li><h4>VIM</h4>

<p>上手VIM的时候和用Linux的时间基本相同，以前看得各种书上都会推荐它和emacs
我最后是选择里vim(因为emacs太难上手)</p>

<p>没有什么好说的，附上我正在用的配置文件<a href="https://github.com/LittleKey/k-vim">k-vim</a>
https://github.com/LittleKey/k-vim</p></li>
<li><h4>markdown and tex</h4>

<p>某日在twitter上看到某人的推说
    "收到的简历太多，所以先过滤掉work文档"</p>

<p>于是搜索了一些相关资料，了解到了md和tex
tex以前就听说过，是kunth神写的排版软件，他非常的强大
计算机巨作 TAOCP 就是他用自己写的tex软件来写的
我简单的学习了tex与markdown的使用(现在这份总结就是用markdown写的)
因为时间时间不多，而且这篇总结也不长，所以就用方便简洁快速的markdown写了
tex需要开各种宏...(扯远了
go on...</p></li>
<li><h4>waf and makefile</h4>

<p>makefile 是为大部分软件开发者所知道的，用于管理一个大项目时用的管理编译用的东西
waf则是用python写的，类似makefile的东西
我简单的学习了他们两者 Makefile的语法要简单，但是需要shell基础 所以我没能熟练掌握他
waf语法相比makefile则要稍微复杂，且提供更丰富的功能(得益强大python的支持)
因为我有python的使用经验，所以上手也没算怎么难，基本就如同去了解一个库
并且使用waf写的功能，让他做了点分外的事(见上文 3 TeXWW)</p></li>
<li><h4>English</h4>

<p>依靠着字典，勉强能慢速读些原著，慢慢来...争取明年弄个四级</p></li>
<li><h4>Data Structrue and Algorithm</h4>

<p>只看了一本书罢了，只能说勉强了解到了几种数据结构吧(他们的分析真的很难)</p>

<ul>
<li>各种链表：单向链表, 双向两边，循环链表，跳跃表，确定性跳跃表 etc</li>
<li>各种树：普通二叉树，AVl(平衡二叉树)，伸展树，自顶向下伸展树，红黑树 etc</li>
<li>图算法：图实现(邻接矩阵，邻接链表)，图遍历(dfs/bfs)，最小生成树算法，最短路径算法 etc</li>
<li>散列表：各种分离链接法，再散列，可扩散列 etc （好多。。。不过确实很好
用，常数时间的插入与查找真强，还能去重。。</li>
<li>不相交集ADT：这个貌似是用二项堆弄出森林然后一直合并的算法，资料都很难查到，不常见</li>
<li>各种表：N维数组啥的。。。</li>
</ul>

<p>暂时想到这么多了。。。懒得翻书查，这个暑假都花在上面了</p></li>
<li><h4>C++</h4>

<p>不想说了,都到两位数了,总结吧</p></li>
</ol>

<h3>总结</h3>

<pre><code>需要多注意课堂知识，也省得制造很多不必要的麻烦 浪费课余时间
需要提高自控能力,课余时间也应该更多的放在学习上，现在的学习效率
让我感到很不满足...

不知什么时候 我应该还会再拿起算法...
希望能早睡早起....
</code></pre>

<h3>下学年计划简单概述</h3>

<ul>
<li>操作系统(一本书《现代操作系统》)</li>
<li>复习一次计算机组成(书名忘了)</li>
<li>重拾数学(具体数学，微积分啥的)</li>
<li>重拾算法(算法导论)
书太多懒得写了。。。</li>
</ul>

<p>打算在寒假写一个个人blod网站
暑假前写一个操作系统
下半学期大概会去看编译原理...都是后话...</p>
