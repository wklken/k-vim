*usr_04.txt*	For Vim version 7.4.  最后修改: 2004年6月

		    VIM用户手册 - by Bram Moolenaar
		 (译者: Nek_in http://vimcdoc.sf.net)

			     作小改动


本章介绍几种修正和移动文本的方法，这包括三种修改文本的基本方法: 操作符－动作，
可视模式以及文本对象。

|04.1|	操作符与动作
|04.2|	改变文本
|04.3|	重复一个修改
|04.4|	可视模式
|04.5|	移动文本
|04.6|	拷贝文本
|04.7|	使用剪贴板
|04.8|	文本对象
|04.9|	替换模式
|04.10|	结论

下一章:  |usr_05.txt|  选项设置
前一章:  |usr_03.txt|  移动
  目录:  |usr_toc.txt|

==============================================================================
*04.1*	操作符与动作

在第二章你已经学过使用 "x" 命令来删除一个字符以及通过计数前缀，例如 "4x" 去删
除多个字符。
    "dw" 命令删除一个单词。你可能认出来了，"w" 是词移动命令。实际上，"d" 命令
后面可以跟任何 "动作" (motion) 命令，它会删除从当前位置到光标移动到的目标位置
的全部内容。
    例如 "4w" 命令能够向后移动四个单词。所以 "d4w" 命令删除 4 个单词。

	To err is human. To really foul up you need a computer. ~
			 ------------------>
				 d4w

	To err is human. you need a computer. ~

Vim 只删除从当前位置到 "动作" 把光标移动到的位置的前一个位置。这是因为 Vim 认
为你可能不想删掉一个单词的第一个字符。如果你用 "e" 命令作为动作来移动到单词结
尾，Vim 这时认为你是想删掉整个单词 (包括最后一个字符):

	To err is human. you need a computer. ~
			-------->
			   d2e

	To err is human. a computer. ~

是否包括光标所在的字符取决于你使用的移动命令。在参考手册中，当不包括这个字符
时，称为 "非包含的" (exclusive)，而包括这个字符时，称为 "包含的" (inclusive)。

"$" 命令移动到行尾。所以，"d$" 命令从当前的位置一直删除到本行行尾。这是一个
"包含的" 命令，所以，这行的最后一个字符也会被删除:

	To err is human. a computer. ~
		       ------------>
			    d$

	To err is human ~

以上定义了一个命令组合模式: 操作符－动作。你首先输入一个操作符命令，例如，"d"
就是一个删除操作符。然后你输入一个动作命令，例如 "4l" 或者 "w"。这种方法使你可
以在任何你能越过的文本上执行各种操作。

==============================================================================
*04.2*	修改文本

另一个操作符命令是 "c"，表示修改，change。它的作用方式与 "d" 操作符相似，只是
完成后会切换到插入模式。例如，"cw" 修改一个词，更精确的说，它删除一个词，并切
换到插入模式。

	To err is human ~
	   ------->
	     c2wbe<Esc>

	To be human ~

这里 "c2wbe<Esc>" 包括如下操作:

	c	修改操作符
	2w	移动两个单词的距离 (与操作符合起来，它删除两个单词并进入插入模
		式)
	be	插入 be 这个单词
	<Esc>	切换回普通模式

如果你留意，你会发现一个奇怪的地方: human 前面的空格没有被删除。有一句谚语说
道: 任何问题都有一个简单，清楚但错误的回答。"cw" 命令就属于这种情况。c 操作符
在很多地方都和 d 一样，但有一个例外，"cw"。它实际上象 "ce" 一样，删除到单词
尾。这样单词后面的空格就不包括在内了。这要追溯到使用 Vi 的旧日子。由于很多人已
经习惯了这种方式，这个不一致之处就留在 Vim 里了。


更 多 的 修 改 命 令

像 "dd" 可以删除一行一样，"cc" 修改一整行。但它会保留这一行的缩进 (前导空格)。

"d$" 删除到行尾；"c$" 则修改到行尾。这相当于先用 "d$" 删除一行再用 "a" 启动插
入模式，以便加入新的文字。


快 捷 键

有些 "操作符－动作" 命令由于经常被使用，所以被设置为单字符命令:

	x  表示  dl  (删除当前光标下的字符)
	X  表示  dh  (删除光标左边的字符)
	D  表示  d$  (删除到行尾)
	C  表示  c$  (修改到行尾)
	s  表示  cl  (修改一个字符)
	S  表示  cc  (修改一整行)


在 什 么 地 方 加 入 计 数 前 缀

命令 "3dw" 和 "d3w" 都是删除 3 个单词。如果你非要寻根问底，那么: "3dw" 表示删
除一个单词 3 次，而 "d3w" 表示删除三个单词一次。这是一个没有分别的分别。实际上
你可以放两个计数前缀，例如，"3d2w" 删除两个单词三次，共计六个单词。


替 换 单 个 字 符

"r" 命令不是操作符。它只是等你输入一个字符然后用这个字符替换当前光标上的字符。
你可以用 "cl" 命令或者 "s" 命令完成相同的功能，但 "r" 命令不需要使用 <Esc> 退
出插入状态:

	there is somerhing grong here ~
	rT	     rt    rw

	There is something wrong here ~

通过计数前缀，"r" 命令可以使多个字符被同一个字符替换，例如:

	There is something wrong here ~
			   5rx

	There is something xxxxx here ~

要用换行符替换一个字符可以用命令 "r<Enter>"。这会删除一个字符并插入一个换行
符。在这里使用计数前缀会删除多个字符但只插入一个换行符: "4r<Enter>" 用一个换行
符替换四个字符。

==============================================================================
*04.3*	重复一个修改

"." 是 Vim 中一个非常简单而有用的命令。它重复最后一次的修改操作。例如，假设你
在编辑一个 HTML 文件，你想删除所有的 <B> 标记。你把光标移到第一个 "<" 上，然后
用 "df>" 命令删除 <B>。然后你就可以移到 </B> 的 < 上面用 "." 命令删除它。"."
命令执行最后一次的修改命令 (在本例中，就是 "df>")。要删除下一个 <B> 标记，移动
到下一个 < 的位置，再执行 "." 命令即可。

			      To <B>generate</B> a table of <B>contents ~
	f<   找第一个 <	      --->
	df>  删除到 >	         -->
	f<   找下一个 <	           --------->
	.    重复 df>			    --->
	f<   找下一个 <			       ------------->
	.    重复 df >					    -->

"." 命令重复任何除 "u" (撤销)，CTRL-R (重做) 和冒号命令外的修改。

再举一个例子: 你想把 "four" 修改成 "five"。有好几个地方都要作这种修改。你可以
用如下命令快速完成这个操作:

	/four<Enter>	找到第一个 "four"
	cwfive<Esc>	修改成 "five"
	n		找下一个 "four"
	.		重复修改操作
	n		找下一个 "four"
	.		重复修改
			如此类推......

==============================================================================
*04.4*	可视模式

要删除一些简单的东西，用 "操作符－动作" 命令可以完成得很好。但很多情况下，并不
容易确定用什么命令可以移到你想修改的地方。这时候，你就需要可视模式了。

你可以用 "v" 命令启动可视模式。你可以移动光标到需要的地方。当你这样做的时候，
中间的文本会被高亮显示。最后执行一下 "操作符" 命令即可。
    例如，要从一个单词的一半删除到下一个单词的一半:

		This is an examination sample of visual mode ~
			       ---------->
				 velllld

		This is an example of visual mode ~

但你这样做的时候，你不需要真的算要按 l 多少次，你可以在按 "d" 前清楚得看到将要
被删除的是哪些文本。

如果任何时候你改了主意，只用按一下 <Esc> 就能退出可视模式。


按 行 选 择

如果你想对整行做操作，可以使用 "V" 命令来启动可视模式。你会发现在你作任何移动
之前，整行都被高亮显示了。左右移动不会有任何效果。而通过上下移动，你可以一次选
择多行。
    例如，用 "Vjj" 可以选中三行:

			  +------------------------+
			  | text more text	   |
		       >> | more text more text    | |
	      选中的行 >> | text text text	   | | Vjj
		       >> | text more		   | V
			  | more text more	   |
			  +------------------------+

列 块 选 择

如果你要处理一个矩形块内的文本，可以使用 CTRL-V 启动可视模式。这在处理表格时非
常有用。

		name		Q1	Q2	Q3
		pierre		123	455	234
		john		0	90	39
		steve		392	63	334

要删除中间 "Q2" 这一栏，把光标移动到 "Q2" 的 "Q" 上面。按 CTRL-V 启动列块可视
模式。现在用 "3j" 向下移动三行，然后用 "w" 移到下一个单词。你可以看到最后一栏
的第一个字符也被包括进来了。要去掉它，用 "h" 命令即可。现在按 "d"，中间一栏就
被删除了。


移 动 到 另 一 端

如果你在可视模式下选中了一些文字，然后你又发现你需要改变被选择的文字的另一端，
用 "o" 命令即可 (提示: "o" 表示 other end)，光标会移动到被选中文字的另一端，现
在你可以移动光标去改变选中文字的开始点了。再按 "o" 光标还会回到另一端。

当使用列块可视模式的时候，你会有四个角，"o" 只是把你移到对角上。而用 "O" 则能
移到同一行的另一个角上。

备注: "o" 和 "O" 在可视模式下与在普通模式下的作用有很大的不同；在普通模式下，
它们的作用是在光标后或前加入新的一行。

==============================================================================
*04.5*	移动文本

当你用 "d"，"x" 或者其它命令删除文本的时候，这些文字会被存起来。你可以用 p 命
令重新粘贴出来 (p 在 Vim 中表示 put，放置)。
    看看下面的例子。首先，你会在你要删除的那一行上输入 "dd" 删除一整行，然后移
动到你要重新插入这行的地方输入 "p" (put)，这样这一行就会被插入到光标下方。

	a line		a line	      a line
	line 2	  dd	line 3	  p   line 3
	line 3			      line 2

由于你删除的是一整行，"p" 命令把该行插入到光标下方。如果你删除的是一行的一部分
(例如一个单词)，"p" 命令会把它插入到光标的后面。

	Some more boring try text to out commands. ~
			 ---->
			  dw

	Some more boring text to out commands. ~
			 -------->
			    welp

	Some more boring text to try out commands. ~


关 于 粘 贴 的 更 多 知 识

"P" 命令象 "p" 一样也是插入字符，但插入点在光标前面。当你用 "dd" 删除一行，
"P" 会把它插入到光标所在行的前一行。而当你用 "dw" 删除一个单词，"P" 会把它插入
到光标前面。

你可以执行这个命令多次，每次会插入相同的文本。

"p" 和 "P" 命令接受计数前缀，被插入的文本就会被插入指定的次数。所以 "dd" 后加
一个 "3p" 会把删除行的三个拷贝插入到文本中。


交 换 两 个 字 符

经常发生这样的情况，当你输入字符的时候，你的手指比脑子转得快 (或者相反？)。这
样的结果是你经常把 "the" 敲成 "teh"。Vim 让你可以很容易得修正这种错误。只要把
光标移到 "teh" 的 "e" 上，然后执行 "xp" 即可。这个工作过程是: "x" 删除一个字
符，保存到寄存器。"p" 把这个被保存的字符插入到光标的后面，也就是在 "h" 的后面
了。

	teh     th     the ~
	 x       p

==============================================================================
*04.6*	拷贝文本

要把文本从一个地方拷贝到另一个地方，你可以先删除它，然后用 "u" 命令恢复，再用
"p" 拷到另一个地方。这里还有一种简单的办法: 抽出 (yank)。"y" 命令可以把文字拷
贝到寄存器中。然后用 "p" 命令粘贴到别处。
    yanking 是 Vim 中拷贝命令的名字。由于 "c" 已经被用于表示 change 了，所以拷
贝 (copy) 就不能再用 "c" 了。但 "y" 还是可用的。把这个命令称为 "yanking" 是为
了更容易记住 "y" 这个键。(译者注: 这里只是把原文译出以作参考，"抽出" 文本毕竟
是不妥的。后文中将统一使用 "拷贝"。中文可不存在 change 和 copy 的问题。)

由于 "y" 是一个操作符，所以 "yw" 命令就是拷贝一个单词了。当然了，计数前缀也是
有效的。要拷贝两个单词，就可以用 "y2w"。例如:

	let sqr = LongVariable * ~
		 -------------->
		       y2w

	let sqr = LongVariable * ~
			       p

	let sqr = LongVariable * LongVariable ~

注意: "yw" 命令包括单词后面的空白字符。如果你不想要这个字符，改用 "ye" 命令。

"yy" 命令拷贝一整行，就像 "dd" 删除一整行一样。出乎意料地是，"D" 删除到行尾而
"Y" 却是拷贝一整行。要注意这个区别！"y$" 拷贝到行尾。

	a text line   yy	a text line	       a text line
	line 2			line 2		p      line 2
	last line		last line	       a text line
						       last line

==============================================================================
*04.7*	使用剪贴板

如果你使用 Vim 的 GUI 版本 (gvim)，你可以在 "Edit" 菜单中找到 "Copy" 项。你可
以先用可视模式选中一些文本，然后使用 Edit/Copy 菜单。现在被选中的文本被拷进了
剪贴板。你可以把它粘贴到其它程序，或者在 Vim 内部使用。

如果你已经从其它程序中拷贝了一些文字到剪贴板，你可以在 Vim 中用 Edit/Paste 菜
单粘贴进来，这在普通模式和插入模式中都是有效的。如果在可视模式，被选中的文字会
被替换掉。

"Cut" 菜单项会在把文字拷进剪贴板前删除它。"Copy"，"Cut" 和 "Paste" 命令在弹出
菜单中也有 (当然了，前提是有弹出式菜单)。如果你的 Vim 有工具条，在工具条上也能
找到这些命令。

如果你用的不是 GUI，或者你根本不喜欢用菜单，你只能用其它办法了。你还是可以用普
通的 "y" (yank) 和 "p" (put) 命令，但在前面必须加上 "* (一个双引号加一个星
号)。例如，要拷贝一行到剪贴板中:
>
	"*yy

要粘贴回来:
>
	"*p

这仅在支持剪贴板的 Vim 版本中才能工作。关于剪贴板的更多内容请参见 |09.3| 和
|clipboard|。

==============================================================================
*04.8*	文本对象

如果你在一个单词的中间而又想删掉这个单词，在你用 "dw" 前，你必须先移到这个单词
的开始处。这里还有一个更简单的方法: "daw"。

	this is some example text. ~
		       daw

	this is some text. ~

"daw" 的 "d" 是删除操作符。"aw" 是一个文本对象。提示: "aw" 表示 "A Word" (一个
单词)，这样，"daw" 就是 "Delete A Word" (删除一个单词)。确切地说，该单词后的空
格字符也被删除掉了。

使用文本对象是 Vim 中执行修改的第三种方法。我们已经有 "操作符－动作" 和可视模
式两种方法了。现在我们又有了 "操作符－文本对象"。
    这种方法与 "操作符－动作" 很相似，但它不是操作于从当前位置到移动目标间的内
容，而是对光标所在位置的 "文本对象" 进行操作。文本对象是作为一个整体来处理的。
现在光标在对象中的位置无关紧要。

用 "cis" 可以改变一个句子。看下面的句子:

	Hello there.  This ~
	is an example.  Just ~
	some text. ~

移动到第二行的开始处。现在使用 "cis":

	Hello there.    Just ~
	some text. ~

现在你输入新的句子 "Another line.":

	Hello there.  Another line.  Just ~
	some text. ~

"cis" 包括 "c" (change，修改) 操作符和 "is" 文本对象。这表示 "Inner Sentence"
(内含句子)。还有一个文本对象是 "as"，区别是 "as" 包括句子后面的空白字符而 "is"
不包括。如果你要删除一个句子，而且你还想同时删除句子后面空白字符，就用 "das"；
如果你想保留空白字符而替换一个句子，则使用 "cis"。

你还可以在可视模式下使用文本对象。这样会选中一个文本对象，而且继续留在可视模
式，你可以继续多次执行文本对象命令。例如，先用 "v" 启动可视模式，再用 "as" 就
可以选中一个句子。现在重复执行 "as"，就会继续选中更多的句子。最后你可以使用一
个操作符去处理这些被选中的句子。

你可以在这里找到一个详细的文本对象的列表: |text-objects|。

==============================================================================
*04.9*	替换模式

"R" 命令启动替换模式。在这个模式下，你输入的每个字符都会覆盖当前光标上的字符。
这会一直持续下去，直到你输入 <Esc>。
    在下面的例子中，你在 "text" 的第一个 "t" 上启动替换模式:

	This is text. ~
		Rinteresting.<Esc>

	This is interesting. ~

你可能会注意到，这是用十二个字符替换一行中的五个字符。如果超出行的范围，"R" 命
令自动进行行扩展，而不是替换到下一行。

你可以通过 <Insert> 在插入模式和替换模式间切换。

但当你使用 <BS> (退格键) 进行修正时，你会发现原来被替换的字符又回来了。这就好
像一个 "撤消" 命令一样。

==============================================================================
*04.10*	结论

操作符，移动命令和文本对象可以有各种组合。现在你已经知道它是怎么工作了，你可以
用 N 个操作符加上 M 个移动命令，组合出 N*M 个命令！

你可以在这里找到一个操作符的列表: |operator|

还有很多方法可以删除文本。这是一些经常用到的:

x	删除光标下的字符 ("dl" 的缩写)
X	删除光标前的字符 ("dh" 的缩写)
D	从当前位置删除到行尾 ("d$" 的缩写)
dw	从当前位置删除到下一个单词开头
db	从当前位置删除到前一个单词的开头
diw	删除光标上的单词 (不包括空白字符)
daw	删除光标上的单词 (包括空白字符)
dG	删除到文件末
dgg	删除到文件首

如果你用 "c" 代替 "d"，这会变成修改命令；而改用 "y"，则变成拷贝命令，等等等
等。

还有一些常用的进行修改的命令，放在哪一章都不合适，列在这里:

	~	修改光标下字符的大小写，并移动到下一个字符。这不是一个操作符
		(除非设置了 'tildeop')，所以你不能连接一个动作命令。这个命令在
		可视模式下也有效，它会改变被选中的所有文本的大小写。

	I	移到当前行的第一个非空字符并启动插入模式。

	A	移动到行尾并启动插入模式。

==============================================================================

下一章: |usr_05.txt|  设置选项

版权: 参见 |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
